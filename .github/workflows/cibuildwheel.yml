name: build

on:
  push:
  pull_request:
  release:
    types:
      - published

jobs:
  source:
    name: Build source package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: docker://python
        with:
          args: 'sh -c "pip install build && python -m build --sdist"'

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*

  wheels:
    name: Build binary packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Setup gfortran for macOS x86/arm64
        if: matrix.os == 'macos-latest'
        run: |
          echo ${GITHUB_WORKSPACE}
          CIBW_BEFORE_ALL_MACOS="brew install gfortran && brew unlink gfortran && brew link gfortran && chmod +x "${GITHUB_WORKSPACE}/.github/workflows/before_build.sh" && ./${GITHUB_WORKSPACE}.github/workflows/before_build.sh && echo $CIBW_ENVIRONMENT_MACOS"
          export SDKROOT=$(xcrun -sdk macosx --show-sdk-path) 
          export CIBW_ENVIRONMENT_MACOS="FC=$FC_ARM64 F90=$FC_ARM64 F77=$FC_ARM64 LDFLAGS=\" -arch arm64 $FC_ARM64_LDFLAGS\" CFLAGS=\" -arch arm64\" CXXFLAGS=\" -arch arm64\" CPPFLAGS=\" -arch arm64\" _PYTHON_HOST_PLATFORM=macosx-11.0-arm64 ARCHFLAGS=\" -arch arm64\" FCFLAGS=\" -arch arm64\" CROSS_COMPILING=1 host_alias=aarch64-apple-darwin20.0.0  MACOSX_DEPLOYMENT_TARGET=11.0 SDKROOT=$SDKROOT"
          echo $CIBW_ENVIRONMENT_MACOS
          echo $CIBW_BEFORE_ALL_MACOS
          echo "CIBW_ENVIRONMENT_MACOS=$CIBW_ENVIRONMENT_MACOS" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL_MACOS=$CIBW_BEFORE_ALL_MACOS" >> $GITHUB_ENV
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.14
        env:
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_TEST_SKIP: "*-macosx_arm64"
          # Skip musllinux wheels, which take a long time to build because Numpy must be built from source
          # Skip PyPy wheels
          # Skip 32-bit Intel wheels
          CIBW_SKIP: "*musllinux* pp* *_i686"
          CIBW_BUILD_VERBOSITY: "3"

      - uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    needs: [source, wheels]
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
